package {{reverse-domain app.domain}}.{{snake-case app.name}}

import android.content.Context
import android.os.Bundle
import android.webkit.*
import androidx.appcompat.app.AppCompatActivity
import android.webkit.WebView

class MainActivity : AppCompatActivity() {
    lateinit var client: WebViewClient
    lateinit var chromeClient: WebChromeClient
    lateinit var ipc: IpcInterface

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        client = RustClient()
        chromeClient = RustChromeClient()
        ipc = IpcInterface(this)
        create(this)
    }

    override fun onStart() {
        super.onStart()
        start()
    }

    override fun onResume() {
        super.onResume()
        resume()
    }

    override fun onPause() {
        super.onPause()
        pause()
    }

    override fun onStop() {
        super.onStop()
        stop()
    }

    override fun onWindowFocusChanged(hasFocus: Boolean) {
        super.onWindowFocusChanged(hasFocus)
        focus(hasFocus)
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        save()
    }

    override fun onDestroy() {
        super.onDestroy()
        destroy()
    }

    override fun onLowMemory() {
        super.onLowMemory()
        memory()
    }


    companion object {
        init {
            System.loadLibrary("{{snake-case app.name}}")
        }
    }

    private external fun create(activity: MainActivity)
    private external fun start()
    private external fun resume()
    private external fun pause()
    private external fun stop()
    private external fun save()
    private external fun destroy()
    private external fun memory()
    private external fun focus(focus: Boolean)
}

class RustChromeClient: WebChromeClient() {
  private var loadedUrl: String? = null

  override fun onProgressChanged(view: WebView?, progress: Int) {
    if (loadedUrl != view?.url) {
      loadedUrl = view?.url
      runInitializationScripts()
    }
  }

  companion object {
    init {
      System.loadLibrary("{{snake-case app.name}}")
    }
  }

  private external fun runInitializationScripts()
}

class RustClient: WebViewClient() {
    override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {
        return false
    }

    override fun shouldInterceptRequest(
        view: WebView,
        request: WebResourceRequest
    ): WebResourceResponse? {
        return handleRequest(request)
    }

    companion object {
        init {
            System.loadLibrary("{{snake-case app.name}}")
        }
    }

    private external fun handleRequest(request: WebResourceRequest): WebResourceResponse?
}

class IpcInterface(private val context: Context) {
    @JavascriptInterface
    fun postMessage(message: String) {
        this.ipc(message)
    }

    companion object {
        init {
            System.loadLibrary("{{snake-case app.name}}")
        }
    }

    private external fun ipc(message: String)
}
