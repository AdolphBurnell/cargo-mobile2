package {{reverse-domain app.domain}}.{{snake-case app.name}}

import androidx.appcompat.app.AppCompatActivity
import android.content.Context
import android.os.Bundle
import android.webkit.*
import androidx.webkit.WebViewAssetLoader

class MainActivity : AppCompatActivity() {
    private lateinit var webView: WebView;

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        webView = WryWebView(this)
        setContentView(webView)
    }
}

class WryWebView(context: Context) : WebView(context) {
    companion object {
        init {
            System.loadLibrary("{{snake-case app.name}}")
        }
    }

    private external fun create(webView: WebView): Array<String>

    init {
        val scripts = create(this);
        val assetLoader = WebViewAssetLoader.Builder()
            .addPathHandler("/assets/", WebViewAssetLoader.AssetsPathHandler(context))
            .addPathHandler("/res/", WebViewAssetLoader.ResourcesPathHandler(context))
            .build();
        this.webViewClient = WryClient(scripts, assetLoader);
        this.settings.javaScriptEnabled = true;
        this.addJavascriptInterface(IpcHandler(context), "ipc");

    }
}

class WryClient(private val initializationScripts: Array<String>, private val assetLoader: WebViewAssetLoader) : WebViewClient() {

    override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {
        return false;
    }

    override fun onPageFinished(view: WebView?, url: String?) {
        super.onPageFinished(view, url)
        initializationScripts.forEach { view?.evaluateJavascript(it, null) };
    }

    override fun shouldInterceptRequest(
        view: WebView,
        request: WebResourceRequest
    ): WebResourceResponse? {
        var url = request.url;
        if (url.host == "tauri.wry" && url.pathSegments[0] != "assets") {
            val paths = url.pathSegments;
            if (paths.count() == 2 && paths[0] == "assets") {
                url = url.buildUpon().path("assets" + url.path).build();
            } else if (paths.count() == 1) {
                url = url.buildUpon().path("assets/assets" + url.path).build();
            }
        };
        return assetLoader.shouldInterceptRequest(url)
    }
}

class IpcHandler(private val context: Context) {
    companion object {
        init {
            System.loadLibrary("{{snake-case app.name}}")
        }
    }

    private external fun ipc(message: String)

    @JavascriptInterface
    fun postMessage(message: String) {
        this.ipc(message)
    }
}
