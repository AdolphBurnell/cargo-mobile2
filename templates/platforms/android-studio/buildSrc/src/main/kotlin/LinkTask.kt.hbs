package {{reverse-domain app.domain}}

import java.nio.file.FileSystemException
import java.nio.file.Files
import java.nio.file.Paths
import org.gradle.api.DefaultTask
import org.gradle.api.GradleException
import org.gradle.api.tasks.*

open class LinkTask : DefaultTask() {
    @InputDirectory @PathSensitive(PathSensitivity.RELATIVE) var src: String? = null
    @OutputDirectory var dest: String? = null
    @TaskAction
    fun link() {
        val src = src ?: throw GradleException("src cannot be null")
        val srcFile = project.file(src)
        val destFile = project.file(dest ?: throw GradleException("dest cannot be null"))
        val destPath = Paths.get(destFile.absolutePath)
        if (destFile.exists()) {
            destFile.deleteRecursively()
        }
        // Try creation soft link
        try {
            val target = srcFile.toRelativeString(destFile.parentFile);
            Files.createSymbolicLink(destPath, Paths.get(target));
        } catch (e: FileSystemException) {
            project.fileTree(src).forEach { file ->
                if (file.isFile) {
                    val relativePath = file.toRelativeString(srcFile)
                    val target = destFile.resolve(relativePath)
                    val parent = project.file(target.parent)
                    parent.mkdirs()
                    val targetPath = Paths.get(target.absolutePath)
                    val srcPath = Paths.get(file.absolutePath)
                    // Try creation hard link
                    try {
                        Files.createLink(targetPath, srcPath)
                    } catch (e: FileSystemException) {
                        // Copy file (fallback)
                        System.err.println(e)
                        Files.copy(srcPath, targetPath)
                    }
                }
            }
        }
    }
}
