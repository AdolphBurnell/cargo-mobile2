#!/usr/bin/env bash

set -ex

source "$HOME/.cargo/env"

if [ "$#" -lt 5 ]; then
    echo "Wrong number of arguments passed to build script"
    exit 1
fi

# To prevent horrible arcane linker errors, none of Xcode's env vars are passed
# to this script. Instead, we pass things explicitly as args.
CLI="${1:?}"
SDKROOT="${2:?}"
CONFIGURATION="${3:?}"
PLATFORM_DISPLAY_NAME="${4:?}"
shift 4
ARCHS="${@:?}"

if [ ! -d "$SDKROOT" ]; then
    echo '`$SDKROOT`'" doesn't exist: $SDKROOT"
    exit 1
fi

MAC_SDKROOT=$SDKROOT/../../../../MacOSX.platform/Developer/SDKs/MacOSX.sdk
MAC_ARCH=x86_64_apple_darwin

# set host flags which are used by build scripts
export MAC_FLAGS="-isysroot ${MAC_SDKROOT:?}"
export CFLAGS_$MAC_ARCH="${MAC_FLAGS:?}"
export CXXFLAGS_$MAC_ARCH="${MAC_FLAGS:?}"
export OBJC_INCLUDE_PATH_$MAC_ARCH="${SDKROOT:?}/usr/include"

export RUST_BACKTRACE=1

if [ "${CLI:?}" != "--cli=1" ]; then
    INTERACTIVE="--non-interactive"
fi

if [ "${PLATFORM_DISPLAY_NAME:?}" = "macOS" ]; then
    MACOS="--macos"
fi

# set target-specific flags to not muck up build.rs scripts
for ARCH in ${ARCHS:?}; do
    if [ "${ARCH:?}" = "arm64" ]; then
        PLATFORM_ARCH=aarch64_apple_ios
    fi
    if [ "${ARCH:?}" = "x86_64" ]; then
        PLATFORM_ARCH=x86_64_apple_ios
    fi
    FLAGS="-isysroot ${SDKROOT:?}"
    export CFLAGS_$PLATFORM_ARCH="${FLAGS:?}"
    export CXXFLAGS_$PLATFORM_ARCH="${FLAGS:?}"
    export OBJC_INCLUDE_PATH_$PLATFORM_ARCH="${SDKROOT:?}/usr/include"
done

if [ "${CONFIGURATION:?}" = "release" ]; then
    CONFIG="--release"
fi

for ARCH in ${ARCHS:?}; do
    COMMAND="cargo apple compile-lib --verbose $INTERACTIVE $MACOS $ARCH $CONFIG"
    echo $COMMAND
    eval $COMMAND
done
