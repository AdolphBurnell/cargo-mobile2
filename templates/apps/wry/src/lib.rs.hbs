#[macro_use]
extern crate log;

use anyhow::Result;
#[cfg(target_os = "android")]
use wry::application::{android_fn, platform::android::ndk_glue::*};
use wry::{
    application::{
        event::{Event, WindowEvent},
        event_loop::{ControlFlow, EventLoop},
        window::WindowBuilder,
    },
    webview::WebViewBuilder,
};

#[cfg(target_os = "android")]
fn init_logging() {
    android_logger::init_once(
        android_logger::Config::default()
            .with_min_level(log::Level::Trace)
            .with_tag("{{app.name}}"),
    );
}

#[cfg(not(target_os = "android"))]
fn init_logging() {
    env_logger::init();
}

fn stop_unwind<F: FnOnce() -> T, T>(f: F) -> T {
    match std::panic::catch_unwind(std::panic::AssertUnwindSafe(f)) {
        Ok(t) => t,
        Err(err) => {
            eprintln!("attempt to unwind out of `rust` with err: {:?}", err);
            std::process::abort()
        }
    }
}

fn _start_app() {
    stop_unwind(|| main().unwrap());
}

#[no_mangle]
#[inline(never)]
pub extern "C" fn start_app() {
    #[cfg(target_os = "android")]
    android_fn!({{reverse-domain-snake-case app.domain}}, {{snake-case app.name}});
    _start_app()
}

fn main() -> Result<()> {
    init_logging();
    let event_loop = EventLoop::new();
    let window = WindowBuilder::new()
        .with_title("A fantastic window!")
        .with_inner_size(wry::application::dpi::LogicalSize::new(128.0, 128.0))
        .build(&event_loop)?;
    let webview = WebViewBuilder::new(window)?
        .with_url("https://tauri.app")?
        .with_devtools(true)
        .with_initialization_script("console.log('hello world from init script');")
        .with_ipc_handler(|_, s| {
            dbg!(s);
        })
        .build()?;

    dbg!(webview.window().outer_size());

    event_loop.run(move |event, _, control_flow| {
        *control_flow = ControlFlow::Wait;
        println!("{:?}", event);

        match event {
            Event::WindowEvent {
                event: WindowEvent::CloseRequested,
                window_id,
                ..
            } if window_id == webview.window().id() => *control_flow = ControlFlow::Exit,
            Event::MainEventsCleared => {
                webview.window().request_redraw();
            }
            _ => (),
        }
    });
}

